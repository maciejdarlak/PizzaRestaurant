@model PizzaRestaurant.Domain.Entities.ShippingDetails

@{
    ViewBag.Title = "Pizza Restaurant: Shipment";
}

<h2>Shipment</h2>
<p>Please enter your details and our hot and delicious pizza is coming to you.</p>

@using (Html.BeginForm())
{
    //Error messages for incorrectly completed forms
    @Html.ValidationSummary()
    <h3>Shipment for:</h3>
    <!--Error messages for incorrectly filled forms. Thanks to ".form-group" and ".form-control" (sets the width of the text and its box, border, colors, filling, etc.)
         there is a form in which its subsequent elements are arranged under each other-->
    <div class="form-group">
        <!--"Label" - the form control label-->
        <label>Name:</label>
        <!--The advantage of "Html.TextBoxFor" for newer strongly typed extensions is that they display any errors / warnings during compilation, not at runtime.-->
        @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
    </div>

    foreach (var property in ViewData.ModelMetadata.Properties)
    {
        <!--Forms below the name and packaging-->
        if (property.PropertyName != "Name" && property.PropertyName != "GiftWrap")
        {
            <!--And again at the start of "form-group" and finally "form-control"-->
<div class="form-group">
    <!--"DisplayName" - the display name of the value of this model-->
    <label>@(property.DisplayName ?? property.PropertyName)</label>
    <!--"Html.TextBox" - is used to generate a text field (<input> element) with appropriate values and tags so that it can be used in the form.-->
    @Html.TextBox(property.PropertyName, null, new { @class = "form-control" })
</div>
        }
    }

    <div class="text-center">
        <input class="btn btn-primary" type="submit" value="Finish the order" />
    </div>
}